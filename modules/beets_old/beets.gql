extend type Query {
    beetsGetBeetsFarms: [GqlBeetsFarm!]!
    beetsGetUserDataForFarm(farmId: String!): GqlBeetsFarmUser
    beetsGetUserDataForAllFarms: [GqlBeetsFarmUser!]!
    beetsGetUserPoolData: GqlBeetsUserPoolData!
    beetsGetUserPendingRewards: GqlBeetsUserPendingRewards!
}

type GqlBeetsFarm {
    id: ID!
    pair: Bytes!
    allocPoint: Int!
    slpBalance: BigInt!
    userCount: BigInt!
    block: BigInt!
    lastRewardBlock: BigInt!
    timestamp: BigInt!
    masterChef: GqlBeetsMasterChef!
    rewarder: GqlBeetsRewarder #TODO: deprecate this in preference of rewardTokens array
    rewardTokens: [GqlBeetsFarmRewardToken!]!
    hasBeetsRewards: Boolean!
}

type GqlBeetsFarmRewardToken {
    address: String!
    symbol: String!
    decimals: Int!
    rewardPerSecond: BigDecimal!
    rewardPerDay: BigDecimal!
    tokenPrice: BigDecimal!
    isBeets: Boolean
}

type GqlBeetsMasterChef {
    id: ID!
    beetsPerBlock: BigInt!
    totalAllocPoint: Int!
}

type GqlBeetsRewarder {
    id: ID!
    rewardPerSecond: BigInt!
    rewardToken: Bytes!
    tokens: [GqlBeetsRewarderToken!]!
}

type GqlBeetsRewarderToken {
    token: Bytes!
    symbol: String!
    decimals: Int!
    tokenPrice: Float!
    rewardPerSecond: BigInt!
}

type GqlBeetsFarmUser {
    id: ID!
    address: Bytes!
    amount: BigInt!
    beetsHarvested: BigInt!
    farmId: ID!
    rewardDebt: BigInt!
    timestamp: BigInt!
    pair: Bytes!
}

type GqlBeetsUserPoolData {
    pools: [GqlBeetsUserPoolPoolData!]!
    totalBalanceUSD: BigDecimal!
    totalFarmBalanceUSD: BigDecimal!
    averageApr: BigDecimal!
    averageFarmApr: BigDecimal!
}

type GqlBeetsUserPoolPoolData {
    poolId: String!
    balance: BigDecimal!
    balanceScaled: BigInt!
    balanceUSD: BigDecimal!
    farmBalanceUSD: BigDecimal!
    tokens: [GqlBeetsUserPoolTokenData!]!
    mainTokens: [GqlBeetsUserPoolTokenData!]
    hasUnstakedBpt: Boolean
}

type GqlBeetsUserPoolTokenData {
    address: String!
    symbol: String!
    balance: String!
    balanceUSD: BigDecimal!
    farmBalanceUSD: BigDecimal!
}

type GqlBeetsUserPendingRewards {
    farm: GqlBeetsUserPendingAllFarmRewards!
}

type GqlBeetsUserPendingAllFarmRewards {
    tokens: [GqlBeetsUserPendingRewardsToken!]!
    farms: [GqlBeetsUserPendingFarmRewards!]!
    totalBalanceUSD: BigDecimal!
    numFarms: BigInt!
    farmIds: [String!]!
}

type GqlBeetsUserPendingFarmRewards {
    farmId: String!
    tokens: [GqlBeetsUserPendingRewardsToken!]!
    balanceUSD: BigDecimal!
}

type GqlBeetsUserPendingRewardsToken {
    address: Bytes!
    symbol: String!
    balance: BigDecimal!
    balanceUSD: BigDecimal!
}

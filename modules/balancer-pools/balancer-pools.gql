interface GqlBalancerPoolBase {
    #fields that never change after creation
    id: ID!
    name: String!
    symbol: String!
    address: Bytes!
    owner: Bytes!
    factory: Bytes
    createTime: Int!
    investConfig: GqlBalancerPoolInvestConfig!
    withdrawConfig: GqlBalancerPoolWithdrawConfig!

    #fields that change rarely
    swapFee: BigDecimal!
    swapEnabled: Boolean!

    dynamicData: GqlBalancerPoolDynamicData!
}

type GqlBalancerPoolDynamicData {
    poolId: ID!

    #fields that change often
    totalShares: BigDecimal!
    #data that has USD values
    composition: GqlBalancerPoolComposition! #token balances change often
    totalLiquidity: BigDecimal!
    volume24h: BigDecimal!
    fees24h: BigDecimal!
    totalSwapFee: BigDecimal!
    totalSwapVolume: BigDecimal!
    apr: GqlBalancePoolApr!
}

type GqlBalancerPoolInvestConfig {
    proportionalEnabled: Boolean!
    singleAssetEnabled: Boolean!
    options: [GqlBalancerPoolInvestOption!]!
}

type GqlBalancerPoolInvestOption {
    #we include the index because it is useful for constructing contract calls
    poolTokenIndex: Int!
    poolTokenAddress: String!

    # we use an array here for invest options where there are more than one option, but only one can be selected
    # - FTM/wFTM or ETH/wETH
    # - weighted boosted with nested phantom stable (bb-yv-USD) where you can only invest with DAI or USDC, not both at the same time
    tokenOptions: [GqlBalancerPoolToken!]!
}

type GqlBalancerPoolWithdrawConfig {
    proportionalEnabled: Boolean!
    singleAssetEnabled: Boolean!
    options: [GqlBalancerPoolWithdrawOption!]!
}

type GqlBalancerPoolWithdrawOption {
    poolTokenIndex: Int!
    poolTokenAddress: String!
    tokenOptions: [GqlBalancerPoolToken!]!
}

enum GqlBalancerPoolNestingType {
    NO_NESTING
    HAS_SOME_PHANTOM_BPT
    HAS_ONLY_PHANTOM_BPT
}

type GqlBalancerPoolWeighted implements GqlBalancerPoolBase {
    id: ID!
    name: String!
    symbol: String!
    address: Bytes!
    owner: Bytes!
    factory: Bytes
    createTime: Int!
    investConfig: GqlBalancerPoolInvestConfig!
    withdrawConfig: GqlBalancerPoolWithdrawConfig!
    swapFee: BigDecimal!
    swapEnabled: Boolean!
    dynamicData: GqlBalancerPoolDynamicData!

    tokens: [GqlBalancerPoolTokenUnion!]!
    nestingType: GqlBalancerPoolNestingType!
}

type GqlBalancerPoolStable implements GqlBalancerPoolBase {
    id: ID!
    name: String!
    symbol: String!
    address: Bytes!
    owner: Bytes!
    factory: Bytes
    createTime: Int!
    investConfig: GqlBalancerPoolInvestConfig!
    withdrawConfig: GqlBalancerPoolWithdrawConfig!
    swapFee: BigDecimal!
    swapEnabled: Boolean!
    dynamicData: GqlBalancerPoolDynamicData!

    tokens: [GqlBalancerPoolToken!]!
    amp: BigInt!
}

type GqlBalancerPoolPhantomStable implements GqlBalancerPoolBase {
    id: ID!
    name: String!
    symbol: String!
    address: Bytes!
    owner: Bytes!
    factory: Bytes
    createTime: Int!
    investConfig: GqlBalancerPoolInvestConfig!
    withdrawConfig: GqlBalancerPoolWithdrawConfig!
    swapFee: BigDecimal!
    swapEnabled: Boolean!
    dynamicData: GqlBalancerPoolDynamicData!
    tokens: [GqlBalancerPoolTokenUnion!]!
    nestingType: GqlBalancerPoolNestingType!
}

type GqlBalancerPoolElement implements GqlBalancerPoolBase {
    id: ID!
    name: String!
    symbol: String!
    address: Bytes!
    owner: Bytes!
    factory: Bytes
    createTime: Int!
    investConfig: GqlBalancerPoolInvestConfig!
    withdrawConfig: GqlBalancerPoolWithdrawConfig!
    swapFee: BigDecimal!
    swapEnabled: Boolean!
    dynamicData: GqlBalancerPoolDynamicData!
    tokens: [GqlBalancerPoolToken!]!

    #element specific fields
    unitSeconds: BigInt!
    principalToken: Bytes!
    baseToken: Bytes!
}

type GqlBalancerPoolLinear implements GqlBalancerPoolBase {
    id: ID!
    name: String!
    symbol: String!
    address: Bytes!
    owner: Bytes!
    factory: Bytes
    createTime: Int!
    investConfig: GqlBalancerPoolInvestConfig!
    withdrawConfig: GqlBalancerPoolWithdrawConfig!
    swapFee: BigDecimal!
    swapEnabled: Boolean!
    dynamicData: GqlBalancerPoolDynamicData!
    tokens: [GqlBalancerPoolToken!]!

    #linear specific fields
    mainIndex: Int!
    wrappedIndex: Int!
    upperTarget: BigInt!
    lowerTarget: BigInt!
}

union GqlBalancerPoolTokenUnion = GqlBalancerPoolToken | GqlBalancerPoolTokenPhantomStable | GqlBalancerPoolTokenLinear

interface GqlBalancerPoolTokenBase {
    id: ID!
    address: String!
    balance: BigDecimal!
    decimals: Int!
    name: String!
    symbol: String!
    priceRate: BigDecimal!
    weight: BigDecimal
}

type GqlBalancerPoolToken implements GqlBalancerPoolTokenBase {
    id: ID!
    address: String!
    balance: BigDecimal!
    decimals: Int!
    name: String!
    symbol: String!
    priceRate: BigDecimal!
    weight: BigDecimal
}

type GqlBalancerPoolTokenLinear implements GqlBalancerPoolTokenBase {
    id: ID!
    address: String!
    balance: BigDecimal!
    decimals: Int!
    name: String!
    symbol: String!
    priceRate: BigDecimal!
    weight: BigDecimal

    pool: GqlBalancerPoolLinear!
    #the proportional balances of the underlying tokens, computed as the fraction balance / totalShares
    mainTokenBalance: BigDecimal!
    wrappedTokenBalance: BigDecimal!
    totalMainTokenBalance: BigDecimal! # mainTokenBalance + wrappedTokenBalance * priceRate
}

type GqlBalancerPoolTokenPhantomStable implements GqlBalancerPoolTokenBase {
    id: ID!
    address: String!
    balance: BigDecimal!
    decimals: Int!
    name: String!
    symbol: String!
    priceRate: BigDecimal!
    weight: BigDecimal

    pool: GqlBalancerPoolPhantomStable!
}

type GqlBalancerPoolLinearPoolData {
    id: ID!
    address: String!
    symbol: String!
    priceRate: String!
    mainToken: GqlBalancerPoolLinearPoolMainToken!
    wrappedToken: GqlBalancerPoolLinearPoolWrappedToken!
    unwrappedTokenAddress: String!
    totalSupply: String!
    balance: String!
    poolToken: String!
    mainTokenTotalBalance: String!
}

type GqlBalancerPoolStablePhantomPoolData {
    id: ID!
    address: String!
    symbol: String!
    tokens: [GqlBalancerPoolToken!]!
    totalSupply: String!
    balance: String!
}

type GqlBalancerPoolLinearPoolMainToken {
    address: String!
    index: Int!
    balance: String!
    totalSupply: String!
    name: String!
    symbol: String!
    decimals: Int!
}

type GqlBalancerPoolLinearPoolWrappedToken {
    address: String!
    index: Int!
    balance: String!
    totalSupply: String!
    priceRate: String!
    name: String!
    symbol: String!
    decimals: Int!
}

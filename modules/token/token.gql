extend type Query {
    tokenGetTokens: [GqlToken!]!
    tokenGetCurrentPrices: [GqlTokenPrice!]!
    tokenGetHistoricalPrices(addresses: [String!]!): [GqlHistoricalTokenPrice!]!
    tokenGetTokensDynamicData(addresses: [String!]!): [GqlTokenDynamicData!]!
    tokenGetTokenDynamicData(address: String!): GqlTokenDynamicData
    tokenGetChartData(
        tokenIn: String!
        tokenOut: String!
        range: GqlTokenGetChartDataRange!
    ): [GqlTokenPriceChartDataItem!]!
}

extend type Mutation {
    tokenReloadTokenPrices: Boolean
    tokenSyncTokenDefinitions: String!
    tokenSyncTokenDynamicData: String!
    tokenInitChartData(tokenAddress: String!): String!
}

type GqlTokenPrice {
    address: String!
    price: Float!
}

type GqlHistoricalTokenPrice {
    address: String!
    prices: [GqlHistoricalTokenPriceEntry!]!
}

type GqlHistoricalTokenPriceEntry {
    timestamp: String!
    price: Float!
}

type GqlToken {
    address: String!
    name: String!
    symbol: String!
    decimals: Int!
    chainId: Int!
    logoURI: String
    priority: Int!
    tradable: Boolean!
}

type GqlTokenDynamicData {
    id: String!
    tokenAddress: String!
    price: Float!
    ath: Float!
    atl: Float!
    marketCap: String
    fdv: String
    high24h: Float!
    low24h: Float!
    priceChange24h: Float!

    priceChangePercent24h: Float!
    priceChangePercent7d: Float
    priceChangePercent14d: Float
    priceChangePercent30d: Float
    updatedAt: String!
}

enum GqlTokenGetChartDataRange {
    SEVEN_DAY
    THIRTY_DAY
}

type GqlTokenPriceChartDataItem {
    id: ID!
    timestamp: Int!
    open: AmountHumanReadable!
    high: AmountHumanReadable!
    low: AmountHumanReadable!
    close: AmountHumanReadable!
}
